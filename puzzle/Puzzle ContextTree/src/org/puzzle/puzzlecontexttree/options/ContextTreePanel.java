/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.puzzle.puzzlecontexttree.options;

import java.util.ResourceBundle;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbPreferences;

/**
 * 
 * @author johann sorel
 */
public final class ContextTreePanel extends javax.swing.JPanel {

    public static final String PREF_COL_VISIBILITY = "col_visibility";
    public static final String PREF_COL_OPACITY = "col_opacity";
    public static final String PREF_COL_STYLE = "col_style";
    
    public static final String PREF_NOD_SOURCE = "nod_source";
    public static final String PREF_NOD_STYLE = "nod_style";
    
    public static final String PREF_POP_LAYER_VISIBLE = "pop_layer_visible";
    public static final String PREF_POP_SEPARATOR_1 = "pop_separator_1";
    public static final String PREF_POP_LAYER_FEATURE = "pop_layer_feature";
    public static final String PREF_POP_CONTEXT_ACTIVE = "pop_context_active";
    public static final String PREF_POP_SEPARATOR_2 = "pop_separator_2";
    public static final String PREF_POP_CUT = "pop_cut";
    public static final String PREF_POP_COPY = "pop_copy";
    public static final String PREF_POP_PASTE = "pop_paste";
    public static final String PREF_POP_DUPLICATE = "pop_duplicate";
    public static final String PREF_POP_SEPARATOR_3 = "pop_separator_3";
    public static final String PREF_POP_DELETE = "pop_delete";
    public static final String PREF_POP_SEPARATOR_4 = "pop_separator_4";
    public static final String PREF_POP_LAYER_PROPERTY = "pop_layer_property";
    public static final String PREF_POP_CONTEXT_PROPERTY = "pop_context_property";
    public static final String PREF_POP_STYLE_RULE_MIN = "pop_style_rule_min";
    public static final String PREF_POP_STYLE_RULE_MAX = "pop_style_rule_max";
    
    
    
    private final ContextTreeOptionsPanelController controller;

    ContextTreePanel(ContextTreeOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        String[] columns = {PREF_COL_VISIBILITY,PREF_COL_OPACITY,PREF_COL_STYLE};        
        tab_columns.setModel( new TwoColumnModel( columns ));
        
        String[] nodes = {PREF_NOD_SOURCE,PREF_NOD_STYLE};        
        tab_nodes.setModel( new TwoColumnModel( nodes ));
        
        String[] popups = {PREF_POP_LAYER_VISIBLE, PREF_POP_SEPARATOR_1,PREF_POP_LAYER_FEATURE,PREF_POP_CONTEXT_ACTIVE,
                            PREF_POP_SEPARATOR_2,PREF_POP_CUT,PREF_POP_COPY,PREF_POP_PASTE,PREF_POP_DUPLICATE,
                            PREF_POP_SEPARATOR_3,PREF_POP_DELETE,PREF_POP_SEPARATOR_4,PREF_POP_LAYER_PROPERTY,
                            PREF_POP_CONTEXT_PROPERTY,PREF_POP_STYLE_RULE_MIN,PREF_POP_STYLE_RULE_MAX};
        tab_popup.setModel(new TwoColumnModel(popups));
        
        
        // TODO listen to changes in form fields and call controller.changed()
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tab_columns = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tab_nodes = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tab_popup = new javax.swing.JTable();

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);

        jScrollPane1.setViewportView(tab_columns);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(173, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Columns", jPanel1);

        jScrollPane2.setViewportView(tab_nodes);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(173, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sub-nodes", jPanel2);

        jScrollPane3.setViewportView(tab_popup);

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(173, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Popup menu", jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    void load() {
    // TODO read settings and initialize GUI
    // Example:        
    // someCheckBox.setSelected(Preferences.userNodeForPackage(ContextTreePanel.class).getBoolean("someFlag", false));
    // or for org.openide.util with API spec. version >= 7.4:
    // someCheckBox.setSelected(NbPreferences.forModule(ContextTreePanel.class).getBoolean("someFlag", false));
    // or:
    // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
    // TODO store modified settings
    // Example:
    // Preferences.userNodeForPackage(ContextTreePanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or for org.openide.util with API spec. version >= 7.4:
    // NbPreferences.forModule(ContextTreePanel.class).putBoolean("someFlag", someCheckBox.isSelected());
    // or:
    // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tab_columns;
    private javax.swing.JTable tab_nodes;
    private javax.swing.JTable tab_popup;
    // End of variables declaration//GEN-END:variables

//private classes-----------------------------------------------------------
    ResourceBundle bundle = ResourceBundle.getBundle("org/puzzle/puzzlecontexttree/options/Bundle");
    
    private class TwoColumnModel extends AbstractTableModel{

        
        
        private final String[] keys;
        
        TwoColumnModel(String[] keys){
            this.keys = keys;
        }
        
        public int getRowCount() {
            return keys.length;
        }

        public int getColumnCount() {
            return 2;
        }

        @Override
        public Class<?> getColumnClass(int col) {
            return (col == 0)? Boolean.class : String.class;
        }

        @Override
        public String getColumnName(int arg0) {
            return "";
        }

        
        
        @Override
        public boolean isCellEditable(int row, int col) {
            return col == 0;
        }

        
        @Override
        public void setValueAt(Object value, int row, int col) {
            if(col == 0){
                Boolean b = (Boolean)value;
                NbPreferences.forModule(ContextTreePanel.class).putBoolean( keys[row], b);                                
            }
        }
        public Object getValueAt(int row, int col) {
            if(col == 0){
                return NbPreferences.forModule(ContextTreePanel.class).getBoolean(keys[row], false);
            }else{
                return bundle.getString(keys[row]);
                //return NbBundle.getMessage(ContextTreePanel.class, keys[row]);
            }
        }
        
    }


}
