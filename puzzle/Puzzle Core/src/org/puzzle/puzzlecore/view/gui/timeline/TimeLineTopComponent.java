/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.puzzle.puzzlecore.view.gui.timeline;

import java.awt.BorderLayout;
import java.awt.Color;
import java.io.Serializable;
import java.util.Date;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.openide.util.Utilities;
import org.puzzle.puzzlecore.swing.timeline.DefaultTimeLineItem;
import org.puzzle.puzzlecore.swing.timeline.JTimeLine;

/**
 * Top component which displays something.
 */
final class TimeLineTopComponent extends TopComponent {

    private static final ImageIcon NORMAL = new ImageIcon(TimeLineTopComponent.class.getResource("/org/puzzle/puzzlecore/swing/timeline/mini_circle.png"));
    private static final ImageIcon SELECTED = new ImageIcon(TimeLineTopComponent.class.getResource("/org/puzzle/puzzlecore/swing/timeline/greenled.png"));
    
    private static TimeLineTopComponent instance;
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/puzzle/puzzlecore/view/gui/timeline/history.png";

    private static final String PREFERRED_ID = "TimeLineTopComponent";

    private TimeLineTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(TimeLineTopComponent.class, "CTL_TimeLineTopComponent"));
        setToolTipText(NbBundle.getMessage(TimeLineTopComponent.class, "HINT_TimeLineTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
        
        JTimeLine line = new JTimeLine();
        
        Date d = new Date();
        long v = 0;
        for (int i = 0; i < 100; i++) {
            v = (long) (Math.random() * 1000f * 60f * 60f * 24f * 30f * 12f);
            Date nd = new Date(d.getTime() + v);
            String tt = "tooltip nÂ°" + i;

            if (Math.random() > 0.7f) {
                DefaultTimeLineItem item = new DefaultTimeLineItem(nd, tt, Color.GRAY, NORMAL.getImage(),SELECTED.getImage());
                line.addItem(item);
            } else {
                DefaultTimeLineItem item = new DefaultTimeLineItem(nd, tt, Color.BLUE, null,null);
                line.addItem(item);
            }

        }
        
        
        add(BorderLayout.CENTER,line);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(200, 200));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized TimeLineTopComponent getDefault() {
        if (instance == null) {
            instance = new TimeLineTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the TimeLineTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized TimeLineTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(TimeLineTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof TimeLineTopComponent) {
            return (TimeLineTopComponent) win;
        }
        Logger.getLogger(TimeLineTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return TimeLineTopComponent.getDefault();
        }
    }
}
