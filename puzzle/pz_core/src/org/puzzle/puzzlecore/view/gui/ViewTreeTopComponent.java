/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *
 *  GPLv3 + Classpath exception
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.puzzle.puzzlecore.view.gui;

import java.io.Serializable;
import java.util.Collection;
import java.util.logging.Logger;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
import org.puzzle.puzzlecore.view.MapGroup;
import org.puzzle.puzzlecore.view.MapView;
import org.puzzle.puzzlecore.view.ViewService;

/**
 * Top component which displays something.
 * @author : johann sorel
 */
final class ViewTreeTopComponent extends TopComponent {

    
    static final String ICON_PATH = "org/puzzle/puzzlecore/view/gui/background.png";
    
    private Lookup.Result resultViews = null;
    private Lookup.Result resultGroups = null;
    private static ViewTreeTopComponent instance;
    private static final String PREFERRED_ID = "ViewTreeTopComponent";

    private ViewTreeTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(ViewTreeTopComponent.class, "CTL_ViewTreeTopComponent"));
        setToolTipText(NbBundle.getMessage(ViewTreeTopComponent.class, "HINT_ViewTreeTopComponent"));
        setIcon(Utilities.loadImage(ICON_PATH, true));
                        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        guiNewGroup = new javax.swing.JButton();
        guiNewView = new javax.swing.JButton();
        jsp1 = new javax.swing.JScrollPane();
        guiTreeView = new org.puzzle.puzzlecore.gtextend.widget.viewtree.JViewTree();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        guiNewGroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/puzzle/puzzlecore/gtextend/widget/iconset/group_add.png"))); // NOI18N
        guiNewGroup.setFocusable(false);
        guiNewGroup.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guiNewGroup.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guiNewGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guiNewGroupActionPerformed(evt);
            }
        });
        jToolBar1.add(guiNewGroup);

        guiNewView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/puzzle/puzzlecore/view/gui/view_add.png"))); // NOI18N
        guiNewView.setFocusable(false);
        guiNewView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guiNewView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guiNewView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guiNewViewActionPerformed(evt);
            }
        });
        jToolBar1.add(guiNewView);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jsp1.setViewportView(guiTreeView);

        add(jsp1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private int incV = 0;
    private int incG = 0;
    private void guiNewViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiNewViewActionPerformed
//        MapView view = new MapView(new JStreamNavMap());
//        view.setName("View "+ ++incV);
//
//        view.open();
//        view.requestActive();
    }//GEN-LAST:event_guiNewViewActionPerformed

    private void guiNewGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guiNewGroupActionPerformed
        MapGroup group = new MapGroup();
        group.setTitle("Group "+ ++incG);

        ViewService service = Lookup.getDefault().lookup(ViewService.class);        
        service.add(group);        
    }//GEN-LAST:event_guiNewGroupActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton guiNewGroup;
    private javax.swing.JButton guiNewView;
    private org.puzzle.puzzlecore.gtextend.widget.viewtree.JViewTree guiTreeView;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JScrollPane jsp1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized ViewTreeTopComponent getDefault() {
        if (instance == null) {
            instance = new ViewTreeTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the ViewTreeTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized ViewTreeTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(ViewTreeTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof ViewTreeTopComponent) {
            return (ViewTreeTopComponent) win;
        }
        Logger.getLogger(ViewTreeTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        ViewService v = Lookup.getDefault().lookup(ViewService.class);

        if (v != null) {
            resultViews = v.getLookup().lookupResult(MapView.class);
            resultViews.addLookupListener(new LookupListener() {

                public void resultChanged(LookupEvent lookupEvent) {
                    Lookup.Result<MapView> r = (Lookup.Result<MapView>) lookupEvent.getSource();
                    Collection<? extends MapView> c = r.allInstances();
                    Collection<MapView> tv = guiTreeView.getTreeTableModel().getViews();

                    for (MapView v : c) {
                        if (!tv.contains(v)) {
                            guiTreeView.getTreeTableModel().addView(v);
                        }
                    }
                    
                    for (MapView v : tv) {
                        if (!c.contains(v)) {
                            guiTreeView.getTreeTableModel().removeView(v);
                        }
                    }
                    
                }
            });
            
            resultGroups = v.getLookup().lookupResult(MapGroup.class);
            resultGroups.addLookupListener(new LookupListener() {

                @Override
                public void resultChanged(LookupEvent lookupEvent) {
                    Lookup.Result<MapGroup> r = (Lookup.Result<MapGroup>) lookupEvent.getSource();
                    Collection<? extends MapGroup> c = r.allInstances();
                    Collection<MapGroup> tv = guiTreeView.getTreeTableModel().getGroups();

                    for (MapGroup g : c) {
                        if (!tv.contains(g)) {
                            guiTreeView.getTreeTableModel().addGroup(g);
                        }
                    }
                    
                    for (MapGroup g : tv) {
                        if (!c.contains(g)) {
                            guiTreeView.getTreeTableModel().removeGroup(g);
                        }
                    }
                }
            });
            
            
        }

    }

    @Override
    public void componentClosed() {
        resultViews = null;
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return ViewTreeTopComponent.getDefault();
        }
    }
}
