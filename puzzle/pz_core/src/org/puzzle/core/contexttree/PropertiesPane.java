/*
 *    Geotoolkit - An Open Source Java GIS Toolkit
 *    http://www.geotoolkit.org
 *
 *    (C) 2007 - 2008, Open Source Geospatial Foundation (OSGeo)
 *    (C) 2008 - 2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 2.1 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.puzzle.core.contexttree;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;

import org.geotoolkit.gui.swing.propertyedit.PropertyPane;
import org.jdesktop.swingx.JXTree;
import org.puzzle.core.windows.mapdetail.JPropertyTree;

/**
 * Multiproperty panel
 *
 * @author  Johann Sorel
 */
public class PropertiesPane extends javax.swing.JPanel implements PropertyPane {

    private PropertyPane active = null;
    private Object target = null;

    /** Creates new form MultiPropertyPanel */
    public PropertiesPane() {
        super();
        initComponents();

        tree.setRootVisible(false);
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        tree.addTreeSelectionListener(new TreeSelectionListener() {

            @Override
            public void valueChanged(TreeSelectionEvent e) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) e.getPath().getLastPathComponent();
                final Object obj = node.getUserObject();
                if (obj != null && obj instanceof PropertyPane) {
                    setSelectedPropertyPanel((PropertyPane) obj);
                }
            }
        });

    }

    public void setRoot(TreeNode node){
        ((DefaultTreeModel)tree.getModel()).setRoot(node);
        tree.expandAll();
    }

    /*public boolean removePropertyPanel(PropertyPanel panel) {
    if (panel != null) {
    return panels.remove(panel);
    }
    return false;
    }*/
    public boolean setSelectedPropertyPanel(final PropertyPane panel) {

        if (panel != null) {
            active = panel;
            active.setTarget(target);
            SwingUtilities.invokeLater(new Runnable() {

                @Override
                        public void run() {
                            panprop.removeAll();
                            panprop.add(panel.getComponent());
                            panprop.revalidate();
                            panprop.repaint();
                        }
                    });

            return true;
        }

        return false;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new JSplitPane();
        jScrollPane1 = new JScrollPane();
        tree = new JPropertyTree();
        panprop = new JPanel();

        jSplitPane1.setBorder(null);
        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(3);

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMinimumSize(new Dimension(152, 202));
        jScrollPane1.setPreferredSize(new Dimension(152, 202));

        tree.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        tree.setMinimumSize(new Dimension(150, 200));
        tree.setPreferredSize(new Dimension(150, 200));
        jScrollPane1.setViewportView(tree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        panprop.setLayout(new GridLayout(1, 1));
        jSplitPane1.setRightComponent(panprop);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jSplitPane1, GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jSplitPane1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setTarget(Object target) {
        this.target = target;
    }

    @Override
    public void apply() {
        if(active != null){
            active.apply();
        }
    }

    @Override
    public void reset() {
        if(active != null){
            active.reset();
        }
    }

    @Override
    public String getTitle(){
        return "";
    }

    @Override
    public ImageIcon getIcon(){
        return null;
    }

    @Override
    public String getToolTip(){
        return "";
    }

    @Override
    public Component getComponent() {
        return this;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane jScrollPane1;
    private JSplitPane jSplitPane1;
    private JPanel panprop;
    private JXTree tree;
    // End of variables declaration//GEN-END:variables

}
