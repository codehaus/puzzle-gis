/*
 *    Puzzle GIS - Desktop GIS Platform
 *    http://puzzle-gis.codehaus.org
 *
 *    (C) 2007-2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 3 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.puzzle.core.actions;

import java.util.Collection;
import java.util.Map;
import java.util.Map.Entry;
import java.util.TreeMap;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JTabbedPane;
import org.openide.util.Lookup;

import org.puzzle.core.project.source.capabilities.DistantSourceCreation;
import org.puzzle.core.project.source.GISSourceInfo;
import org.puzzle.core.project.source.GISSourceService;
import org.puzzle.core.project.source.capabilities.SourceCreationPane;

/**
 * Distant generic chooser. This will call all GISDistantSourceService
 * 
 * @author  Johann Sorel (Puzzle-GIS)
 */
final class JDistantSourcePane extends javax.swing.JPanel {
    
    private final Collection<? extends GISSourceService> services;
    
    
    JDistantSourcePane() {
        initComponents();

        services = Lookup.getDefault().lookupAll(GISSourceService.class);
        final Map<String,SourceCreationPane> ordered = new TreeMap<String, SourceCreationPane>();

        for (final GISSourceService service : services) {
            final DistantSourceCreation distant = service.getLookup().lookup(DistantSourceCreation.class);
            if (distant != null) {
                ordered.put(service.getTitle(), distant.createPanel());
            }
        }

        //preserve name order
        for(Entry<String,SourceCreationPane> entry : ordered.entrySet()){
            guiTabPane.add(entry.getKey(), entry.getValue());
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiTabPane = new JTabbedPane();

        guiTabPane.setTabPlacement(JTabbedPane.LEFT);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(guiTabPane, GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(guiTabPane, GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTabbedPane guiTabPane;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns a map of name > GISSourceInfo to create GISSources.
     */
    final Map<String,GISSourceInfo> getSources(){
        final SourceCreationPane panel = (SourceCreationPane) guiTabPane.getSelectedComponent();
        return panel.createSources();
    }
    
}
