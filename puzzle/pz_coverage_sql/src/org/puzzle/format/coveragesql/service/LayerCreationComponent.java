/*
 *    Puzzle GIS - Desktop GIS Platform
 *    http://puzzle-gis.codehaus.org
 *
 *    (C) 2007-2010, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 3 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.puzzle.format.coveragesql.service;

import java.awt.Font;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CancellationException;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import org.geotoolkit.coverage.io.CoverageStoreException;

import org.geotoolkit.map.MapLayer;
import org.geotoolkit.style.DefaultStyleFactory;
import org.jdesktop.swingx.combobox.ListComboBoxModel;
import org.openide.util.Exceptions;

import org.puzzle.core.project.source.capabilities.JLayerChooser;
import org.puzzle.core.project.source.capabilities.LayerChooserMonitor;
import org.puzzle.core.project.source.capabilities.LayerCreation;
import org.puzzle.format.coveragesql.resources.CoverageSQLResource;

/**
 *
 * @author Johann Sorel (Puzzle-GIS)
 */
public class LayerCreationComponent extends JLayerChooser {

    private final CoverageSQLSource source;

    /** Creates new form LayerCreationComponent */
    LayerCreationComponent(LayerChooserMonitor monitor, CoverageSQLSource source) {
        super(monitor);
        this.source = source;
        initComponents();
        guiLst.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        try {
            List<String> layerNames = new ArrayList<String>(source.getDatabase().getLayers().result());
            guiLst.setModel(new ListComboBoxModel(layerNames));
        } catch (CoverageStoreException ex) {
            Exceptions.printStackTrace(ex);
        } catch (CancellationException ex) {
            Exceptions.printStackTrace(ex);
        }

        guiLst.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                Object selected = guiLst.getSelectedValue();
                if(selected != null){
                    guiTitle.setText(selected.toString());
                }
            }
        });

    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        getMonitor().setReady(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new JLabel();
        guiTitle = new JTextField();
        jScrollPane1 = new JScrollPane();
        guiLst = new JList();

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | Font.BOLD));
        jLabel2.setText(CoverageSQLResource.getString("title")); // NOI18N

        jScrollPane1.setViewportView(guiLst);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(jScrollPane1, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(guiTitle, GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(guiTitle, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * {@inheritDoc }
     */
    @Override
    public MapLayer[] getLayers() {
        Map<String,String> parameters = new HashMap<String,String>();
        parameters.put(CoverageSQLSource.COVERAGENAME_PROP, guiTitle.getText());

        final MapLayer layer = source.getLookup().lookup(LayerCreation.class).createLayer(parameters);
        layer.setDescription(new DefaultStyleFactory().description(guiTitle.getText(),"") );
        return new MapLayer[]{layer};
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JList guiLst;
    private JTextField guiTitle;
    private JLabel jLabel2;
    private JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
