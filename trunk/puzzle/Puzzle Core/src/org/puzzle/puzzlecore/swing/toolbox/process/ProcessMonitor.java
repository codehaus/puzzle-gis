/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.puzzle.puzzlecore.swing.toolbox.process;

import org.opengis.util.InternationalString;
import org.opengis.util.ProgressListener;

/**
 *
 * @author johann sorel
 */
public class ProcessMonitor extends javax.swing.JDialog implements ProgressListener{
    
    private InternationalString task = null;
    private boolean canceled = false;
    private float progress = 0f;
        
    
    /** Creates new form ProcessMonitor
     * @param parent
     * @param modal 
     */
    public ProcessMonitor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        gui_task = new javax.swing.JLabel();
        gui_cancel = new javax.swing.JButton();
        gui_progress = new javax.swing.JProgressBar();
        jsp2 = new javax.swing.JScrollPane();
        gui_errors = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        gui_desc = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Task :");

        gui_task.setText(" ");

        gui_cancel.setText("Cancel");

        gui_errors.setColumns(20);
        gui_errors.setRows(5);
        jsp2.setViewportView(gui_errors);

        gui_desc.setColumns(20);
        gui_desc.setRows(5);
        jScrollPane1.setViewportView(gui_desc);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(gui_task, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(gui_cancel)
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jsp2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                            .add(gui_progress, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(gui_task))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jsp2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(gui_progress, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(gui_cancel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ProcessMonitor dialog = new ProcessMonitor(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton gui_cancel;
    private javax.swing.JTextArea gui_desc;
    private javax.swing.JTextArea gui_errors;
    private javax.swing.JProgressBar gui_progress;
    private javax.swing.JLabel gui_task;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jsp2;
    // End of variables declaration//GEN-END:variables

    public String getDescription() {
        return gui_desc.getText();
    }
    
    public void setDescription(String desc) {
       gui_desc.setText(desc);
    }

    public InternationalString getTask() {
        return task;
    }

    public void setTask(InternationalString task) {
        this.task = task;
        if(task != null){
            gui_task.setText(task.toString());
        }
    }

    public boolean isCanceled() {
        return canceled;
    }

    public void setCanceled(boolean cancel) {
        canceled = cancel;
        if(cancel){
            gui_progress.setString("Canceled");
        }
    }
    
    public void started() {
        gui_progress.setString("Processing...");
    }

    public void progress(float val) {
        progress = val;
        gui_progress.setValue( (int)val*100);
    }

    public float getProgress() {
        return progress;
    }

    public void complete() {
        gui_progress.setString("Complete");
    }

    public void warningOccurred(String arg0, String arg1, String arg2) {
        StringBuffer buf = new StringBuffer(arg0);
        buf.append(" : \n");
        buf.append(arg1);
        buf.append("\n");
        buf.append(arg2);
        buf.append("\n");
        gui_errors.append(buf.toString());
    }

    public void exceptionOccurred(Throwable arg0) {
        gui_errors.append( "Error : " + arg0.toString() );
    }
    
}
