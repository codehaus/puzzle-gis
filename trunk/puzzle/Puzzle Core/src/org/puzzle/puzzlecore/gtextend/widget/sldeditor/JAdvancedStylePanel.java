/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.puzzle.puzzlecore.gtextend.widget.sldeditor;

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreePath;
import org.geotools.gui.swing.icon.IconBundle;
import org.geotools.gui.swing.propertyedit.PropertyPanel;
import org.geotools.gui.swing.style.JLineSymbolizerPanel;
import org.geotools.gui.swing.style.JPointSymbolizerPanel;
import org.geotools.gui.swing.style.JPolygonSymbolizerPanel;
import org.geotools.gui.swing.style.JRasterSymbolizerPanel;
import org.geotools.map.MapLayer;
import org.geotools.styling.FeatureTypeStyle;
import org.geotools.styling.LineSymbolizer;
import org.geotools.styling.PointSymbolizer;
import org.geotools.styling.PolygonSymbolizer;
import org.geotools.styling.RasterSymbolizer;
import org.geotools.styling.Rule;
import org.geotools.styling.Style;
import org.geotools.styling.Symbolizer;

/**
 *
 * @author johann sorel
 */
public class JAdvancedStylePanel extends javax.swing.JPanel implements PropertyPanel {

    private MapLayer layer;

    /** Creates new form JAdvancedStylePanel */
    public JAdvancedStylePanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pan_split = new javax.swing.JSplitPane();
        pan_info = new javax.swing.JPanel();
        jsp = new javax.swing.JScrollPane();
        tree = new org.puzzle.puzzlecore.gtextend.widget.sldeditor.JStyleTree();

        pan_split.setDividerLocation(220);
        pan_split.setDividerSize(4);

        pan_info.setLayout(new java.awt.GridLayout(1, 1));
        pan_split.setRightComponent(pan_info);

        jsp.setViewportView(tree);

        pan_split.setLeftComponent(jsp);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pan_split, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(pan_split, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    public JComponent getPanel() {
        return this;
    }

    public void apply() {
        if (layer != null) {
            layer.setStyle(tree.getStyle());
        }
    }

    public ImageIcon getIcon() {
        return IconBundle.getResource().getIcon("16_style");
    }

    public String getTitle() {
        return "advanced";
    }

    public void setTarget(Object layer) {

        if (layer instanceof MapLayer) {
            this.layer = (MapLayer) layer;
            parse();
        }
    }

    private void parse() {

        if (layer != null) {
            if (layer.getFeatureSource() != null) {
                
                tree.setStyle(layer.getStyle());

                tree.getSelectionModel().addTreeSelectionListener(new TreeSelectionListener() {

                    public void valueChanged(TreeSelectionEvent e) {
                        TreePath path = tree.getSelectionModel().getSelectionPath();

                        if (path != null) {
                            Object val = ((DefaultMutableTreeNode) path.getLastPathComponent()).getUserObject();

                            pan_info.removeAll();

                            if (val instanceof Style) {
                                Style style = (Style) val;
                                JStylePanel pan = new JStylePanel();
                                pan.setStyle(style);
                                pan_info.add(pan);
                            } else if (val instanceof FeatureTypeStyle) {
                                FeatureTypeStyle fts = (FeatureTypeStyle) val;
                                JFeatureTypeStylePanel pan = new JFeatureTypeStylePanel();
                                pan.setFTS(fts);
                                pan_info.add(pan);
                            } else if (val instanceof Rule) {
                                Rule rule = (Rule) val;
                                JRulePanel pan = new JRulePanel();
                                pan.setRule(rule);
                                pan_info.add(pan);
                            } else if (val instanceof Symbolizer) {
                                Symbolizer symb = (Symbolizer) val;

                                JComponent detail = null;
                                if (symb instanceof RasterSymbolizer) {
                                    JRasterSymbolizerPanel p = new JRasterSymbolizerPanel();
                                    p.setLayer(layer);
                                    p.setSymbolizer(symb);
                                    detail = p.getComponent();
                                } else if (symb instanceof PolygonSymbolizer) {
                                    JPolygonSymbolizerPanel p = new JPolygonSymbolizerPanel();
                                    p.setLayer(layer);
                                    p.setSymbolizer(symb);
                                    detail = p.getComponent();
                                } else if (symb instanceof LineSymbolizer) {
                                    JLineSymbolizerPanel p = new JLineSymbolizerPanel();
                                    p.setLayer(layer);
                                    p.setSymbolizer(symb);
                                    detail = p.getComponent();
                                } else if (symb instanceof PointSymbolizer) {
                                    JPointSymbolizerPanel p = new JPointSymbolizerPanel();
                                    p.setLayer(layer);
                                    p.setSymbolizer(symb);
                                    detail = p.getComponent();
                                } else {
                                    detail = new JLabel("pas bon");
                                }

                                pan_info.add(detail);
                            }

                            pan_info.revalidate();

                        }
                    }
                });

            }
        }
        
    }

    public void reset() {
        parse();
    }

    public String getToolTip() {
        return "";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jsp;
    private javax.swing.JPanel pan_info;
    private javax.swing.JSplitPane pan_split;
    private org.puzzle.puzzlecore.gtextend.widget.sldeditor.JStyleTree tree;
    // End of variables declaration//GEN-END:variables
}
