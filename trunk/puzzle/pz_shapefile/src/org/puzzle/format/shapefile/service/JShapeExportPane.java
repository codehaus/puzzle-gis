/*
 *    Puzzle GIS - Desktop GIS Platform
 *    http://puzzle-gis.codehaus.org
 *
 *    (C) 2007-2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 3 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.puzzle.format.shapefile.service;

import java.io.File;
import java.io.IOException;
import java.io.Serializable;
import java.util.Collections;
import java.util.Map;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import org.geotoolkit.data.DefaultTransaction;
import org.geotoolkit.data.FeatureSource;
import org.geotoolkit.data.FeatureStore;
import org.geotoolkit.data.FileDataStoreFactorySpi;
import org.geotoolkit.data.shapefile.ShapefileDataStore;
import org.geotoolkit.data.shapefile.ShapefileDataStoreFactory;
import org.geotoolkit.gui.swing.misc.FileFilterFactory;
import org.opengis.feature.simple.SimpleFeature;
import org.opengis.feature.simple.SimpleFeatureType;
import org.puzzle.core.project.source.capabilities.JExportPane;

/**
 * @author Johann Sorel (Puzzle-GIS)
 */
public class JShapeExportPane extends JExportPane {

    /** Creates new form JShapeExportPane */
    public JShapeExportPane() {
        initComponents();

        FileFilter filter = FileFilterFactory.createFileFilter(FileFilterFactory.FORMAT.ESRI_SHAPEFILE);

        guiChooser.addChoosableFileFilter(filter);
        guiChooser.setAcceptAllFileFilterUsed(false);
        guiChooser.setMultiSelectionEnabled(false);
        guiChooser.setFileFilter(filter);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiChooser = new JFileChooser();

        guiChooser.setControlButtonsAreShown(false);
        guiChooser.setDialogType(JFileChooser.SAVE_DIALOG);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(guiChooser, GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(guiChooser, GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JFileChooser guiChooser;
    // End of variables declaration//GEN-END:variables

    @Override
    public void recordSource(FeatureSource<SimpleFeatureType,SimpleFeature> source) throws IOException {

        File file = guiChooser.getSelectedFile();

        // Create the DataStoreFactory
        FileDataStoreFactorySpi factory = new ShapefileDataStoreFactory();

        // Create a Map object used by our DataStore Factory
        // NOTE: file.toURI().toURL() is used because file.toURL() is deprecated
        Map<String, Serializable> map = Collections.singletonMap("url", (Serializable) file.toURI().toURL());

        // Create the ShapefileDataStore from our factory based on our Map object
        ShapefileDataStore myData = (ShapefileDataStore) factory.createNewDataStore(map);

        // Create the Shapefile (empty at this point)
        myData.createSchema(source.getSchema());

        // Tell the DataStore what type of Coordinate Reference System (CRS) to use
        myData.forceSchemaCRS(source.getSchema().getCoordinateReferenceSystem());

        FeatureSource<SimpleFeatureType,SimpleFeature> featureTarget = myData.getFeatureSource(myData.getTypeNames()[0]);

        if (featureTarget instanceof FeatureStore) {
            FeatureStore<SimpleFeatureType, SimpleFeature> store = (FeatureStore<SimpleFeatureType, SimpleFeature>) featureTarget;

            DefaultTransaction transaction = new DefaultTransaction();
            store.setTransaction(transaction);

            try {
                store.addFeatures(source.getFeatures());
                transaction.commit();
            } catch (IOException ex) {
                try {
                    store.getTransaction().rollback();
                } catch (IOException e) {
                    throw e;
                }
                throw ex;
            } finally {
                transaction.close();
            }
            
        } else {
            throw new IOException("You don't have permission to write in this DataStore.");
        }



        myData.dispose();



    }
}
