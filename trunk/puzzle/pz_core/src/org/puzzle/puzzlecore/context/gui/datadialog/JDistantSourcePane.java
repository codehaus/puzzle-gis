/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.puzzle.puzzlecore.context.gui.datadialog;

import java.util.ArrayList;
import java.util.Collection;
import org.geotools.gui.swing.datachooser.DataPanel;
import org.geotools.map.MapLayer;
import org.openide.util.Lookup;
import org.puzzle.puzzlecore.project.source.GISDistantSourceService;
import org.puzzle.puzzlecore.project.source.GISSource;
import org.puzzle.puzzlecore.project.source.GISSourceService;

/**
 * Distant generic chooser. This will call all GISDistantSourceService
 * 
 * @author  Johann Sorel
 */
public class JDistantSourcePane extends javax.swing.JPanel {
    
    private final Collection<? extends GISSourceService> services;
    
    
    public JDistantSourcePane() {
        initComponents();

        services = Lookup.getDefault().lookupAll(GISSourceService.class);

        for (GISSourceService service : services) {

            if (service instanceof GISDistantSourceService) {
                GISDistantSourceService distantService = (GISDistantSourceService) service;
                DataPanel panel = distantService.createDataPanel();
                guiTabPane.add(distantService.getTitle(), panel.getChooserComponent());
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        guiTabPane = new javax.swing.JTabbedPane();

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(guiTabPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(guiTabPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane guiTabPane;
    // End of variables declaration//GEN-END:variables

    public Collection<GISSource> getGISSources(){
        Collection<GISSource> sources = new ArrayList<GISSource>();
        
        
        DataPanel panel = (DataPanel) guiTabPane.getSelectedComponent();
        
        MapLayer[] layers = panel.getLayers();
        
//        
//        File[] files = gui_choose.getSelectedFiles();
//        
//        file_loop:
//        for(File f : files){
//            
//            for(GISSourceService service : services){
//                if( ! (service instanceof GISFileSourceService)) continue;
//                GISSource source = null;
//                
//                try{
//                    if(((GISFileSourceService)service).isValidFile(f))
//                        source = ((GISFileSourceService)service).createSource(f);
//                }catch(IllegalArgumentException ex){
//                    ex.printStackTrace();
//                }
//                if(source != null){
//                    sources.add(source);
//                    continue file_loop;
//                }
//            }
//        }
        
        return sources;
    }
    
}
