/*
 *    Puzzle GIS - Desktop GIS Platform
 *    http://puzzle-gis.codehaus.org
 *
 *    (C) 2007-2009, Johann Sorel
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation;
 *    version 3 of the License.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 */
package org.puzzle.core.actions;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

import org.openide.util.Lookup;

import org.puzzle.core.project.source.capabilities.FileSourceCreation;
import org.puzzle.core.project.source.GISSourceInfo;
import org.puzzle.core.project.source.GISSourceService;

/**
 * File generic chooser. This will call all GISFileSourceService
 * 
 * @author Johann Sorel (Puzzle-GIS)
 */
final class JFileSourcePane extends javax.swing.JPanel {

    private static volatile File lastPath = null;
    private static volatile FileFilter lastFilter = null;

    private final Collection<? extends GISSourceService> services;
    
    JFileSourcePane() {
       this(null);
    }
      
    /** 
     * Creates new form panel, similar to a JFileChooser panel.
     * @param openPath : default path to open
     */
    JFileSourcePane(final File openPath) {
        initComponents();                
        services = Lookup.getDefault().lookupAll(GISSourceService.class);

        final List<FileFilter> filters = new ArrayList<FileFilter>();

        for(final GISSourceService service : services){

            final FileSourceCreation fileService = service.getLookup().lookup(FileSourceCreation.class);
            if(fileService != null){
                filters.add(fileService.createFilter());
            }
        }

        Collections.sort(filters, new Comparator<FileFilter>(){
            @Override
            public int compare(FileFilter o1, FileFilter o2) {
                return o1.getDescription().compareTo(o2.getDescription());
            }
        });

        for(FileFilter ff : filters){
            gui_choose.addChoosableFileFilter(ff);
        }

        final FileFilter lastf = lastFilter;
        if(lastf != null){
            gui_choose.setFileFilter(lastf);
        }


        if(openPath != null){
            gui_choose.setCurrentDirectory(openPath);
            lastPath = openPath;
        }else{
            final File lastp = lastPath;
            if(lastp != null){
                gui_choose.setCurrentDirectory(lastp);
            }
        }
        gui_choose.setMultiSelectionEnabled(true);
    }

    /**
     * Go to the given directory.
     */
    final void setDirectory(final File directory){
        gui_choose.setCurrentDirectory(directory);
    }

    /**
     * Get the current directory.
     */
   final File getDirectory(){
        return gui_choose.getCurrentDirectory();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gui_choose = new JFileChooser();

        gui_choose.setControlButtonsAreShown(false);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(gui_choose, GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(gui_choose, GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JFileChooser gui_choose;
    // End of variables declaration//GEN-END:variables

    /**
     * Returns a map of name > GISSourceInfo to create GISSources.
     */
    final Map<String,GISSourceInfo> getSources(){
        final Map<String,GISSourceInfo> sources = new HashMap<String, GISSourceInfo>();
        final File[] files = gui_choose.getSelectedFiles();
        
        file_loop:
        for(final File f : files){
            
            for(final GISSourceService service : services){

                final FileSourceCreation fileService = service.getLookup().lookup(FileSourceCreation.class);
                if(fileService == null) continue;

                GISSourceInfo source = null;
                
                try{
                    if(fileService.createFilter().accept(f)){
                        source = fileService.createSourceInfo(f);
                    }
                }catch(IllegalArgumentException ex){
                    ex.printStackTrace();
                }
                if(source != null){
                    sources.put(f.getName(),source);
                    continue file_loop;
                }
            }
        }
        
        lastFilter = gui_choose.getFileFilter();
        lastPath = gui_choose.getCurrentDirectory();

        return sources;
    }
    
}
