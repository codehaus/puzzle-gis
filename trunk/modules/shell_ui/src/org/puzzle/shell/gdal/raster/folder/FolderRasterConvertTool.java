/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.puzzle.shell.gdal.raster.folder;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import org.jdesktop.swingx.JXTitledSeparator;
import org.openide.util.NbBundle;
import org.puzzle.shell.gdal.ENV;
import org.puzzle.shell.gdal.GDALTool;
import org.puzzle.shell.misc.runtime.ProcessObject;

/**
 * panneau  de convertion d'un fichier raster
 * @author romain govaere
 * @author johann sorel
 */
public class FolderRasterConvertTool extends JPanel implements GDALTool{
    
    String repertoire = "";
    
    /** Creates new form RasterConvDesFichiers */
    public FolderRasterConvertTool() {
        initComponents();
    }
    
    
    private void getFilesRec(List<File> allFiles, String root, boolean sub) {
        File f = new File(root);
        File[] listFiles = f.listFiles();
        for (int i = 0; i < listFiles.length; i++) {
            if (listFiles[i].isDirectory() && sub) getFilesRec(allFiles, listFiles[i].toString(),sub);
            else if ( !listFiles[i].isDirectory()) allFiles.add(listFiles[i]);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {




        jPanel1 = new JPanel();
        jPanel2 = new JPanel();
        jLabel1 = new JLabel();
        jtf_entree = new JTextField();
        but_chercher_entree = new JButton();
        jLabel2 = new JLabel();
        format_sortie = new JComboBox();
        jtf_sortie = new JTextField();
        but_chercher_sortie = new JButton();
        format_entree = new JComboBox();
        jPanel3 = new JPanel();
        chk_sub = new JCheckBox();
        jXTitledSeparator1 = new JXTitledSeparator();

        jPanel2.setBorder(BorderFactory.createTitledBorder(NbBundle.getMessage(FolderRasterConvertTool.class, "files"))); // NOI18N
        jLabel1.setText(NbBundle.getMessage(FolderRasterConvertTool.class, "input")); // NOI18N
        but_chercher_entree.setText(NbBundle.getMessage(FolderRasterConvertTool.class, "...")); // NOI18N
        but_chercher_entree.setPreferredSize(new Dimension(45, 20));
        but_chercher_entree.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                but_chercher_entreeactionChercherEntree(evt);
            }
        });

        jLabel2.setText(NbBundle.getMessage(FolderRasterConvertTool.class, "output")); // NOI18N
        format_sortie.setModel(new DefaultComboBoxModel(new String[] { "ERDAS IMAGINE (.img)", "ERMapper Compressed Wavelets (.ecw)", "Joint Photographic Experts Group (.jpg)", "JPEG2000 (.j2k .jp2)", "Portable Network Graphics (.png)", "GEOTIF (.tif)" }));
        format_sortie.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                format_sortieactionFormatSortie(evt);
            }
        });

        jtf_sortie.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jtf_sortiesortieAction(evt);
            }
        });
        jtf_sortie.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                jtf_sortiesortieLost(evt);
            }
        });

        but_chercher_sortie.setText(NbBundle.getMessage(FolderRasterConvertTool.class, "...")); // NOI18N
        but_chercher_sortie.setPreferredSize(new Dimension(45, 20));
        but_chercher_sortie.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                but_chercher_sortieactionChercherSortie(evt);
            }
        });

        format_entree.setModel(new DefaultComboBoxModel(new String[] { "ERDAS IMAGINE (.img)", "ERMapper Compressed Wavelets (.ecw)", "Joint Photographic Experts Group (.jpg)", "JPEG2000 (.j2k .jp2)", "Portable Network Graphics (.png)", "GEOTIF (.tif)" }));
        format_entree.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                format_entreeactionFormatEntree(evt);
            }
        });

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);

        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(format_entree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jtf_entree, GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(but_chercher_entree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(format_sortie, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addGroup(Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jtf_sortie, GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(but_chercher_sortie, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(format_entree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(but_chercher_entree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_entree, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(format_sortie, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(but_chercher_sortie, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_sortie, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel3.setBorder(BorderFactory.createTitledBorder(NbBundle.getMessage(FolderRasterConvertTool.class, "settings"))); // NOI18N
        chk_sub.setSelected(true);
        chk_sub.setText(NbBundle.getMessage(FolderRasterConvertTool.class, "subfolder")); // NOI18N
        chk_sub.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chk_sub.setMargin(new Insets(0, 0, 0, 0));

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);

        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chk_sub)
                .addContainerGap(340, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(chk_sub)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jXTitledSeparator1.setTitle(NbBundle.getMessage(FolderRasterConvertTool.class, "title")); // NOI18N
        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jXTitledSeparator1, GroupLayout.DEFAULT_SIZE, 495, Short.MAX_VALUE)
                    .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTitledSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
                
    private void format_entreeactionFormatEntree(ActionEvent evt) {//GEN-FIRST:event_format_entreeactionFormatEntree
        
    }//GEN-LAST:event_format_entreeactionFormatEntree
    
    private void but_chercher_sortieactionChercherSortie(ActionEvent evt) {//GEN-FIRST:event_but_chercher_sortieactionChercherSortie
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        jfc.setCurrentDirectory(ENV.getPath());
        
        int val = jfc.showOpenDialog(this);
        
        if(val == JFileChooser.APPROVE_OPTION){
            File f = jfc.getSelectedFile();
            jtf_sortie.setText( f.getPath() );
            ENV.updatePath(f.getAbsoluteFile());
            
        }
    }//GEN-LAST:event_but_chercher_sortieactionChercherSortie
    
    private void jtf_sortiesortieLost(FocusEvent evt) {//GEN-FIRST:event_jtf_sortiesortieLost
        
    }//GEN-LAST:event_jtf_sortiesortieLost
    
    private void jtf_sortiesortieAction(ActionEvent evt) {//GEN-FIRST:event_jtf_sortiesortieAction
        
    }//GEN-LAST:event_jtf_sortiesortieAction
    
    private void format_sortieactionFormatSortie(ActionEvent evt) {//GEN-FIRST:event_format_sortieactionFormatSortie
        
    }//GEN-LAST:event_format_sortieactionFormatSortie
    
    private void but_chercher_entreeactionChercherEntree(ActionEvent evt) {//GEN-FIRST:event_but_chercher_entreeactionChercherEntree
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        jfc.setCurrentDirectory(ENV.getPath());
        
        int val = jfc.showOpenDialog(this);
        
        if(val == JFileChooser.APPROVE_OPTION){
            File f = jfc.getSelectedFile();
            jtf_entree.setText( f.getPath() );
            ENV.updatePath(f.getAbsoluteFile());
        }
    }//GEN-LAST:event_but_chercher_entreeactionChercherEntree
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton but_chercher_entree;
    private JButton but_chercher_sortie;
    private JCheckBox chk_sub;
    private JComboBox format_entree;
    private JComboBox format_sortie;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JXTitledSeparator jXTitledSeparator1;
    private JTextField jtf_entree;
    private JTextField jtf_sortie;
    // End of variables declaration//GEN-END:variables

    public JComponent getComponent() {
        return this;
    }

    public ProcessObject[] createProcesses() {
        List<File> allfiles = new ArrayList<File>();
        List<String> okfiles = new ArrayList<String>();
        List<ProcessObject> processes = new ArrayList<ProcessObject>();
        
        String ext_entree = "";
        switch (format_entree.getSelectedIndex()){
            case 0 :ext_entree = ".img";break;
            case 1 :ext_entree = ".ecw";break;
            case 2 :ext_entree = ".jpg";break;
            case 3 :ext_entree = ".jp2";break;
            case 4 :ext_entree = ".png";break;
            case 5 :ext_entree = ".tif";break;
        }
        
        String type_sortie = "";
        String ext_sortie = "";
        switch (format_sortie.getSelectedIndex()){
            case 0 :type_sortie = "HFA"; ext_sortie = ".img"; break;
            case 1 :type_sortie = "ECW"; ext_sortie = ".ecw"; break;
            case 2 :type_sortie = "JPEG"; ext_sortie = ".jpg"; break;
            case 3 :type_sortie = "JPEG2000"; ext_sortie = ".j2k"; break;
            case 4 :type_sortie = "PNG"; ext_sortie = ".png"; break;
            case 5 :type_sortie = "GTiff"; ext_sortie = ".tif"; break;
        }
        
        
        getFilesRec(allfiles,jtf_entree.getText(),chk_sub.isSelected());
        
        for(int i=0; i<allfiles.size(); i++){
            if(allfiles.get(i).getPath().toLowerCase().endsWith(ext_entree)){
                okfiles.add(allfiles.get(i).getPath());
            }
        }
        
        for(int i=0; i<okfiles.size(); i++){
            
            repertoire = okfiles.get(i).substring(0, okfiles.get(i).lastIndexOf(File.separator)+1 );
            
            String shortname = okfiles.get(i).substring( okfiles.get(i).lastIndexOf(File.separator) ,okfiles.get(i).length() );
            shortname = shortname.substring(0, shortname.lastIndexOf(".")) + ext_sortie;
            
            
            String[] parametres = new String[5];
            parametres[0] = ENV.getGDAL_TRANSLATEPath();
            parametres[1] = "-of";
            parametres[2] = type_sortie;
            parametres[3] = okfiles.get(i);
            parametres[4] = jtf_sortie.getText() + shortname;
            
            ProcessObject po = new ProcessObject(parametres,shortname);
            
            processes.add(po);
        }
        
        return processes.toArray(EMPTY_PROCESS_OBJECT_ARRAY);
    }
    
}
