/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.puzzle.shell.gdal.database.postgis;

import java.io.File;
import java.util.ResourceBundle;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.geotools.gui.swing.misc.filter.FileFilterFactory;
import org.puzzle.shell.gdal.ENV;
import org.puzzle.shell.gdal.GDALTool;
import org.puzzle.shell.misc.runtime.ProcessObject;

/**
 * panneau pour l'import/export de donnees POSTGIS
 * @author johann sorel
 */
public class PostGISToShapeTool extends JPanel implements GDALTool {
    
    private final ResourceBundle bundle = ResourceBundle.getBundle("org/puzzle/shell/gdal/database/postgis/Bundle");
        
    private String repertoire = "";
    
    /** Creates new form DBPostGIS */
    public PostGISToShapeTool() {
        initComponents();        
    }
    
    
    private void psTestName() {
        String nom_sortie = ps_jtf_sortie.getText();
        String nouveaunom = bundle.getString("");
        String extension_fichier = bundle.getString("");
        int index = -1;
        
       
        
        //recuperation de l'extension du fichier en sortie
        index = nom_sortie.lastIndexOf(bundle.getString("."));
        if (index != -1){
            extension_fichier = nom_sortie.substring(index,nom_sortie.length());
        }
        
        
        // on corrige l'extension
        if(!nom_sortie.toLowerCase().endsWith(".shp")){
            
            if(nom_sortie.endsWith(File.separator)){
                nom_sortie += "sortie";
            }
            
            if( !nom_sortie.equals("")){
                if ( index == -1 ) {                    
                    nouveaunom =  nom_sortie + ".shp";
                }else{
                    nouveaunom = nom_sortie.substring(0,index) +".shp";
                }
            }
            
        }else{
            nouveaunom = nom_sortie;
        }
        
        ps_jtf_sortie.setText(nouveaunom);
        
    }
    
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jtf_login = new javax.swing.JTextField();
        jtf_db = new javax.swing.JTextField();
        jtf_ip = new javax.swing.JTextField();
        jtf_mdp = new javax.swing.JPasswordField();
        jLabel9 = new javax.swing.JLabel();
        jtf_table = new javax.swing.JTextField();
        jXTitledSeparator1 = new org.jdesktop.swingx.JXTitledSeparator();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ps_jtf_sortie = new javax.swing.JTextField();
        ps_chercher = new javax.swing.JButton();

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PostGISToShapeTool.class, "database"))); // NOI18N

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/puzzle/shell/gdal/database/postgis/Bundle"); // NOI18N
        jLabel5.setText(bundle.getString("id")); // NOI18N

        jLabel6.setText(bundle.getString("password")); // NOI18N

        jLabel7.setText(bundle.getString("ip")); // NOI18N

        jLabel8.setText(org.openide.util.NbBundle.getMessage(PostGISToShapeTool.class, "thedatabase")); // NOI18N

        jtf_ip.setText("127.0.0.1");

        jLabel9.setText(bundle.getString("table")); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtf_login, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 369, Short.MAX_VALUE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel6)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtf_mdp, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtf_table, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel8)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtf_db, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jLabel7)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jtf_ip, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jtf_login, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jtf_mdp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jtf_table, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(jtf_db, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jtf_ip, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jXTitledSeparator1.setTitle(org.openide.util.NbBundle.getMessage(PostGISToShapeTool.class, "title")); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(PostGISToShapeTool.class, "file"))); // NOI18N

        jLabel2.setText(bundle.getString("output")); // NOI18N

        ps_jtf_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                psActionEdit(evt);
            }
        });
        ps_jtf_sortie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                psActionLost(evt);
            }
        });

        ps_chercher.setText(bundle.getString("...")); // NOI18N
        ps_chercher.setPreferredSize(new java.awt.Dimension(45, 20));
        ps_chercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ps_chercherspActionChercher(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel4Layout.createSequentialGroup()
                        .add(ps_jtf_sortie, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(ps_chercher, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel2))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(ps_chercher, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(ps_jtf_sortie, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jXTitledSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jXTitledSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(13, 13, 13)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void psActionLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_psActionLost
        psTestName();
    }//GEN-LAST:event_psActionLost

    private void psActionEdit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_psActionEdit
        psTestName();
    }//GEN-LAST:event_psActionEdit
                
    private void ps_chercherspActionChercher(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ps_chercherspActionChercher
        JFileChooser jfc = new JFileChooser();
        jfc.addChoosableFileFilter(FileFilterFactory.createFileFilter(FileFilterFactory.FORMAT.ESRI_SHAPEFILE));
        
        jfc.setFileFilter(jfc.getChoosableFileFilters()[1]);
        
        jfc.setCurrentDirectory(ENV.getPath());
        
        int val = jfc.showSaveDialog(this);
        
        if(val == JFileChooser.APPROVE_OPTION){
            File f = jfc.getSelectedFile();
            ps_jtf_sortie.setText( f.getPath() );
            ENV.updatePath(f.getAbsoluteFile());
        }
        
        psTestName();
    }//GEN-LAST:event_ps_chercherspActionChercher
                
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private org.jdesktop.swingx.JXTitledSeparator jXTitledSeparator1;
    private javax.swing.JTextField jtf_db;
    private javax.swing.JTextField jtf_ip;
    private javax.swing.JTextField jtf_login;
    private javax.swing.JPasswordField jtf_mdp;
    private javax.swing.JTextField jtf_table;
    private javax.swing.JButton ps_chercher;
    private javax.swing.JTextField ps_jtf_sortie;
    // End of variables declaration//GEN-END:variables

    public ProcessObject[] createProcesses() {
        
        ProcessObject po = null;
        
        int i = ps_jtf_sortie.getText().lastIndexOf(File.separator);
                
        repertoire = ps_jtf_sortie.getText().substring(0,i-1);
        
        String nom = ps_jtf_sortie.getText().substring(i+1,ps_jtf_sortie.getText().length());
        String login = jtf_login.getText();
        String mdp = String.valueOf( jtf_mdp.getPassword() );
        String table = jtf_table.getText();
        String base = jtf_db.getText();
        String ip = jtf_ip.getText();
        String fichier = ps_jtf_sortie.getText();
        
        if(ip.equals("")){
            ip = bundle.getString("127.0.0.1");
        }
        
        
        if(table.equals("") || base.equals("") || fichier.equals("")){
            JOptionPane.showMessageDialog(this,bundle.getString("please_fill_all"),bundle.getString("missing_data"),JOptionPane.ERROR_MESSAGE);
            
        } else {
            
            //ogr2ogr -f "Esri Shapefile"  maTable.shp PG:"hostaddr=127.0.0.1 dbname=Nom_de_ma_base_de_donnees user=Nom_utilisateur password=Mot_de_passe_utilisateur" -sql "select * from maTable"

            String parametres =
                    ENV.getOGR2OGRPath() +
                    " -f " +
                    "\"Esri_Shapefile\" " +
                    "\"" + fichier + "\" " +
                    "PG:\"host=" + ip + " user=" + login + " dbname=" + base + " password=" + mdp + "\" " +
                    "-sql " +
                    "\"select * from " + table + "\"";
            
            System.out.println(parametres);
            
             po = new ProcessObject(parametres,nom);            
        }
        
        psTestName();
        
        if(po!=null){
            return new ProcessObject[]{po};
        }else{
            return EMPTY_PROCESS_OBJECT_ARRAY;
        }
        
    }

    public JComponent getComponent() {
        return this;
    }
    
    
    
}
