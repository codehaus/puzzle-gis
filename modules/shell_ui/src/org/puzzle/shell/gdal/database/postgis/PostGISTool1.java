/*
 * DBPostGIS.java
 *
 * Created on 22 mars 2007, 09:30
 *
 * Copyright 2007 Johann Sorel, Romain Govaere
 *
 * AlterSIG-Convert is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * AlterSIG-Convert is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

package org.puzzle.shell.gdal.database.postgis;

import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.io.File;
import java.util.ResourceBundle;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import org.geotools.gui.swing.misc.filter.FileFilterFactory;
import org.jdesktop.swingx.JXTitledSeparator;
import org.openide.util.NbBundle;
import org.puzzle.shell.gdal.ENV;
import org.puzzle.shell.gdal.GDALTool;
import org.puzzle.shell.misc.runtime.ProcessObject;

/**
 * panneau pour l'import/export de donnees POSTGIS
 * @author  Gaia
 */
public class PostGISTool1 extends JPanel implements GDALTool {
    
    private final ResourceBundle bundle = ResourceBundle.getBundle("org/puzzle/shell/gdal/database/postgis/Bundle");
        
    private String repertoire = "";
    
    /** Creates new form DBPostGIS */
    public PostGISTool1() {
        initComponents();        
    }
    
    
    private void psTestName() {
        String nom_sortie = ps_jtf_sortie.getText();
        String nouveaunom = bundle.getString("");
        String extension_fichier = bundle.getString("");
        int index = -1;
        
       
        
        //recuperation de l'extension du fichier en sortie
        index = nom_sortie.lastIndexOf(bundle.getString("."));
        if (index != -1){
            extension_fichier = nom_sortie.substring(index,nom_sortie.length());
        }
        
        
        // on corrige l'extension
        if(!nom_sortie.toLowerCase().endsWith(".shp")){
            
            if(nom_sortie.endsWith(File.separator)){
                nom_sortie += "sortie";
            }
            
            if( !nom_sortie.equals("")){
                if ( index == -1 ) {                    
                    nouveaunom =  nom_sortie + ".shp";
                }else{
                    nouveaunom = nom_sortie.substring(0,index) +".shp";
                }
            }
            
        }else{
            nouveaunom = nom_sortie;
        }
        
        ps_jtf_sortie.setText(nouveaunom);
        
    }
    
        
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {


        jPanel5 = new JPanel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        jtf_login = new JTextField();
        jtf_db = new JTextField();
        jtf_ip = new JTextField();
        jtf_mdp = new JPasswordField();
        jLabel9 = new JLabel();
        jtf_table = new JTextField();
        jXTitledSeparator1 = new JXTitledSeparator();
        jPanel4 = new JPanel();
        jLabel2 = new JLabel();
        ps_jtf_sortie = new JTextField();
        ps_chercher = new JButton();

        jPanel5.setBorder(BorderFactory.createTitledBorder(NbBundle.getMessage(PostGISTool1.class, "database"))); // NOI18N
        ResourceBundle bundle = ResourceBundle.getBundle("org/puzzle/shell/gdal/database/postgis/Bundle"); // NOI18N
        jLabel5.setText(bundle.getString("id")); // NOI18N

        jLabel6.setText(bundle.getString("password")); // NOI18N

        jLabel7.setText(bundle.getString("ip")); // NOI18N


        jLabel8.setText(NbBundle.getMessage(PostGISTool1.class, "thedatabase")); // NOI18N
        jtf_ip.setText("127.0.0.1");

        jLabel9.setText(bundle.getString("table")); // NOI18N

        GroupLayout jPanel5Layout = new GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);


        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jtf_login, GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jtf_mdp, GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jtf_table, GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jtf_db, GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jtf_ip, GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtf_login, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtf_mdp, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jtf_table, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jtf_db, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtf_ip, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jXTitledSeparator1.setTitle(NbBundle.getMessage(PostGISTool1.class, "title")); // NOI18N
        jPanel4.setBorder(BorderFactory.createTitledBorder(NbBundle.getMessage(PostGISTool1.class, "file"))); // NOI18N
        jLabel2.setText(bundle.getString("output")); // NOI18N

        ps_jtf_sortie.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                psActionEdit(evt);
            }
        });
        ps_jtf_sortie.addFocusListener(new FocusAdapter() {
            public void focusLost(FocusEvent evt) {
                psActionLost(evt);
            }
        });

        ps_chercher.setText(bundle.getString("...")); // NOI18N
        ps_chercher.setPreferredSize(new Dimension(45, 20));
        ps_chercher.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                ps_chercherspActionChercher(evt);
            }
        });

        GroupLayout jPanel4Layout = new GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(ps_jtf_sortie, GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(ps_chercher, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(ps_chercher, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(ps_jtf_sortie, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jPanel5, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jXTitledSeparator1, GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addComponent(jPanel4, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTitledSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jPanel4, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void psActionLost(FocusEvent evt) {//GEN-FIRST:event_psActionLost
        psTestName();
    }//GEN-LAST:event_psActionLost

    private void psActionEdit(ActionEvent evt) {//GEN-FIRST:event_psActionEdit
        psTestName();
    }//GEN-LAST:event_psActionEdit
                
    private void ps_chercherspActionChercher(ActionEvent evt) {//GEN-FIRST:event_ps_chercherspActionChercher
        JFileChooser jfc = new JFileChooser();
        jfc.addChoosableFileFilter(FileFilterFactory.createFileFilter(FileFilterFactory.FORMAT.ESRI_SHAPEFILE));
        
        jfc.setFileFilter(jfc.getChoosableFileFilters()[1]);
        
        jfc.setCurrentDirectory(ENV.getPath());
        
        int val = jfc.showSaveDialog(this);
        
        if(val == JFileChooser.APPROVE_OPTION){
            File f = jfc.getSelectedFile();
            ps_jtf_sortie.setText( f.getPath() );
            ENV.updatePath(f.getAbsoluteFile());
        }
        
        psTestName();
    }//GEN-LAST:event_ps_chercherspActionChercher
                
    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel2;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private JPanel jPanel4;
    private JPanel jPanel5;
    private JXTitledSeparator jXTitledSeparator1;
    private JTextField jtf_db;
    private JTextField jtf_ip;
    private JTextField jtf_login;
    private JPasswordField jtf_mdp;
    private JTextField jtf_table;
    private JButton ps_chercher;
    private JTextField ps_jtf_sortie;
    // End of variables declaration//GEN-END:variables

    public ProcessObject[] createProcesses() {
        
        ProcessObject po = null;
        
        int i = ps_jtf_sortie.getText().lastIndexOf(File.separator);
                
        repertoire = ps_jtf_sortie.getText().substring(0,i-1);
        
        String nom = ps_jtf_sortie.getText().substring(i+1,ps_jtf_sortie.getText().length());
        String login = jtf_login.getText();
        String mdp = String.valueOf( jtf_mdp.getPassword() );
        String table = jtf_table.getText();
        String base = jtf_db.getText();
        String ip = jtf_ip.getText();
        String fichier = ps_jtf_sortie.getText();
        
        if(ip.equals("")){
            ip = bundle.getString("127.0.0.1");
        }
        
        
        if(table.equals("") || base.equals("") || fichier.equals("")){
            JOptionPane.showMessageDialog(this,bundle.getString("please_fill_all"),bundle.getString("missing_data"),JOptionPane.ERROR_MESSAGE);
            
        } else {
            
            //ogr2ogr -f "Esri Shapefile"  maTable.shp PG:"hostaddr=127.0.0.1 dbname=Nom_de_ma_base_de_donnees user=Nom_utilisateur password=Mot_de_passe_utilisateur" -sql "select * from maTable"

            String parametres =
                    ENV.getOGR2OGRPath() +
                    " -f " +
                    "\"Esri_Shapefile\" " +
                    "\"" + fichier + "\" " +
                    "PG:\"host=" + ip + " user=" + login + " dbname=" + base + " password=" + mdp + "\" " +
                    "-sql " +
                    "\"select * from " + table + "\"";
            
            System.out.println(parametres);
            
             po = new ProcessObject(parametres,nom);            
        }
        
        psTestName();
        
        if(po!=null){
            return new ProcessObject[]{po};
        }else{
            return EMPTY_PROCESS_OBJECT_ARRAY;
        }
        
    }

    public JComponent getComponent() {
        return this;
    }
    
    
    
}
