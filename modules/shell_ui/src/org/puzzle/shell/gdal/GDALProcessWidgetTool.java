/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.puzzle.shell.gdal;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import org.openide.util.NbBundle;
import org.puzzle.shell.misc.runtime.ProcessObject;
import org.puzzle.shell.misc.runtime.ProcessObjectPanel;
import org.puzzle.shell.misc.runtime.StatusListener;

/**
 *
 * @author johann sorel
 */
public class GDALProcessWidgetTool extends javax.swing.JPanel {

    private final ProcessObjectPanel guiProcessTable = new ProcessObjectPanel();
    private final GDALTool tool;

    /** Creates new form AbstractGDALProcessPanel */
    public GDALProcessWidgetTool(GDALTool tool) {
        this.tool = tool;        
        initComponents();
        es_pan_process.add(BorderLayout.CENTER,guiProcessTable);
        
        guiPanTool.add(BorderLayout.CENTER, this.tool.getComponent());

        guiProcessTable.addStatusListener(new StatusListener() {

            public void statusUpdated(STATUS stat) {
                if (stat.equals(STATUS.WORKING)) {
                    guiErase.setEnabled(false);
                    guiAddProcess.setEnabled(false);
                    guiStart.setEnabled(false);
                } else {
                    guiAddProcess.setEnabled(true);                    
                    guiErase.setEnabled(guiProcessTable.getProcessNumber() > 0);
                    guiStart.setEnabled(guiProcessTable.getProcessNumber() > 0);
                }
            }
            });



    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        es_pan_process = new JPanel();
        guiErase = new JButton();
        guiStart = new JButton();
        guiPanTool = new JPanel();
        guiAddProcess = new JButton();

        es_pan_process.setBorder(BorderFactory.createTitledBorder(NbBundle.getMessage(GDALProcessWidgetTool.class, "processes"))); // NOI18N
        es_pan_process.setPreferredSize(new Dimension(100, 200));
        es_pan_process.setLayout(new BorderLayout());

        ResourceBundle bundle = ResourceBundle.getBundle("org/puzzle/shell/gdal/Bundle"); // NOI18N
        guiErase.setText(bundle.getString("erase")); // NOI18N
        guiErase.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                guiEraseesActionEffacer(evt);
            }
        });

        guiStart.setText(NbBundle.getMessage(GDALProcessWidgetTool.class, "start")); // NOI18N
        guiStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                guiStartesActionDemarrer(evt);
            }
        });

        guiPanTool.setLayout(new BorderLayout());

        guiAddProcess.setText(NbBundle.getMessage(GDALProcessWidgetTool.class, "add")); // NOI18N
        guiAddProcess.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                guiAddProcessesActionAjouter(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(es_pan_process, GroupLayout.DEFAULT_SIZE, 441, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(guiErase, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(guiStart, GroupLayout.PREFERRED_SIZE, 135, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(318, Short.MAX_VALUE)
                .addComponent(guiAddProcess)
                .addContainerGap())
            .addComponent(guiPanTool, GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
        );

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {guiAddProcess, guiErase, guiStart});

        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(guiPanTool, GroupLayout.DEFAULT_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(guiAddProcess)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(es_pan_process, GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(guiStart)
                    .addComponent(guiErase))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void guiEraseesActionEffacer(ActionEvent evt) {//GEN-FIRST:event_guiEraseesActionEffacer
        guiProcessTable.empty();
        guiStart.setEnabled(guiProcessTable.getProcessNumber() > 0);
        guiErase.setEnabled(guiProcessTable.getProcessNumber() > 0);
}//GEN-LAST:event_guiEraseesActionEffacer

    private void guiStartesActionDemarrer(ActionEvent evt) {//GEN-FIRST:event_guiStartesActionDemarrer
        guiProcessTable.start();
}//GEN-LAST:event_guiStartesActionDemarrer

    private void guiAddProcessesActionAjouter(ActionEvent evt) {//GEN-FIRST:event_guiAddProcessesActionAjouter
        ProcessObject[] pos = tool.createProcesses();

        for (ProcessObject po : pos) {
            guiProcessTable.addProcess(po);
        }

        guiStart.setEnabled(guiProcessTable.getProcessNumber() > 0);
        guiErase.setEnabled(guiProcessTable.getProcessNumber() > 0);
               
}//GEN-LAST:event_guiAddProcessesActionAjouter
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel es_pan_process;
    private JButton guiAddProcess;
    private JButton guiErase;
    private JPanel guiPanTool;
    private JButton guiStart;
    // End of variables declaration//GEN-END:variables

    public JComponent getComponent() {
        return this;
    }
}
