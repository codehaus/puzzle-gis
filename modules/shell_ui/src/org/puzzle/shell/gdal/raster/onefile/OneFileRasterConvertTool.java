/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.puzzle.shell.gdal.raster.onefile;

import java.io.File;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.geotools.gui.swing.misc.filter.FileFilterFactory;
import org.geotools.gui.swing.misc.filter.FileFilterFactory.FORMAT;
import org.puzzle.shell.gdal.ENV;
import org.puzzle.shell.gdal.GDALTool;
import org.puzzle.shell.misc.runtime.ProcessObject;

/**
 * panneau de convertion d'un fichier raster
 * @author Romain govaere
 * @author johann sorel
 */
public class OneFileRasterConvertTool extends JPanel implements GDALTool {

    String repertoire = "";

    /** Creates new form RasterConvUnFichier */
    public OneFileRasterConvertTool() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPl_fichier_RasterConvUnFichier = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jBn_fichier_a_conv = new javax.swing.JButton();
        Jtf_Fichier_a_convertir = new javax.swing.JTextField();
        jCB_format_voulu = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jTF_fichier_en_sortie = new javax.swing.JTextField();
        jBn_fichier_en_sortie = new javax.swing.JButton();
        jXTitledSeparator1 = new org.jdesktop.swingx.JXTitledSeparator();

        jPl_fichier_RasterConvUnFichier.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(OneFileRasterConvertTool.class, "files"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(OneFileRasterConvertTool.class, "input")); // NOI18N

        jBn_fichier_a_conv.setText(org.openide.util.NbBundle.getMessage(OneFileRasterConvertTool.class, "...")); // NOI18N
        jBn_fichier_a_conv.setPreferredSize(new java.awt.Dimension(45, 20));
        jBn_fichier_a_conv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clic_fichier_source(evt);
            }
        });

        Jtf_Fichier_a_convertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionChangementSource(evt);
            }
        });

        jCB_format_voulu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ERDAS IMAGINE (.img)", "ERMapper Compressed Wavelets (.ecw)", "Joint Photographic Experts Group (.jpg)", "JPEG2000(.jp2)", "Portable Network Graphics (.png)", "GEOTIF (.tif)" }));
        jCB_format_voulu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionChangementFormat(evt);
            }
        });

        jLabel5.setText(org.openide.util.NbBundle.getMessage(OneFileRasterConvertTool.class, "output")); // NOI18N

        jTF_fichier_en_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionChangementDestination(evt);
            }
        });
        jTF_fichier_en_sortie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                actionChangementDestination2(evt);
            }
        });

        jBn_fichier_en_sortie.setText(org.openide.util.NbBundle.getMessage(OneFileRasterConvertTool.class, "...")); // NOI18N
        jBn_fichier_en_sortie.setPreferredSize(new java.awt.Dimension(45, 20));
        jBn_fichier_en_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clic_fichier_destination(evt);
            }
        });

        javax.swing.GroupLayout jPl_fichier_RasterConvUnFichierLayout = new javax.swing.GroupLayout(jPl_fichier_RasterConvUnFichier);
        jPl_fichier_RasterConvUnFichier.setLayout(jPl_fichier_RasterConvUnFichierLayout);
        jPl_fichier_RasterConvUnFichierLayout.setHorizontalGroup(
            jPl_fichier_RasterConvUnFichierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPl_fichier_RasterConvUnFichierLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPl_fichier_RasterConvUnFichierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPl_fichier_RasterConvUnFichierLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(342, 342, 342))
                    .addGroup(jPl_fichier_RasterConvUnFichierLayout.createSequentialGroup()
                        .addComponent(Jtf_Fichier_a_convertir, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBn_fichier_a_conv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPl_fichier_RasterConvUnFichierLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                        .addComponent(jCB_format_voulu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPl_fichier_RasterConvUnFichierLayout.createSequentialGroup()
                        .addComponent(jTF_fichier_en_sortie, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBn_fichier_en_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPl_fichier_RasterConvUnFichierLayout.setVerticalGroup(
            jPl_fichier_RasterConvUnFichierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPl_fichier_RasterConvUnFichierLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPl_fichier_RasterConvUnFichierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBn_fichier_a_conv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Jtf_Fichier_a_convertir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPl_fichier_RasterConvUnFichierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCB_format_voulu)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPl_fichier_RasterConvUnFichierLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBn_fichier_en_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTF_fichier_en_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jXTitledSeparator1.setTitle(org.openide.util.NbBundle.getMessage(OneFileRasterConvertTool.class, "title")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPl_fichier_RasterConvUnFichier, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPl_fichier_RasterConvUnFichier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionChangementDestination2(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_actionChangementDestination2
        verification();
    }//GEN-LAST:event_actionChangementDestination2

    private void actionChangementDestination(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionChangementDestination
        verification();
    }//GEN-LAST:event_actionChangementDestination

    private void actionChangementFormat(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionChangementFormat
        verification();
    }//GEN-LAST:event_actionChangementFormat

    private void actionChangementSource(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionChangementSource
        verification();
    }//GEN-LAST:event_actionChangementSource

    private void clic_fichier_destination(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clic_fichier_destination
        JFileChooser explorateurDestination = new JFileChooser();

        explorateurDestination.setFileFilter(explorateurDestination.getChoosableFileFilters()[1]);

        explorateurDestination.setCurrentDirectory(ENV.getPath());

        int valeur2 = explorateurDestination.showSaveDialog(this);

        if (valeur2 == JFileChooser.APPROVE_OPTION) {
            jTF_fichier_en_sortie.setText(explorateurDestination.getSelectedFile().getPath());
            verification();
            ENV.updatePath(explorateurDestination.getSelectedFile().getAbsoluteFile());
        }
    }//GEN-LAST:event_clic_fichier_destination

    private void clic_fichier_source(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clic_fichier_source
        JFileChooser explorateur = new JFileChooser();
        explorateur.addChoosableFileFilter(FileFilterFactory.createFileFilter(FORMAT.ERMAPPER_COMPRESSED_WAVELETS));
        explorateur.addChoosableFileFilter(FileFilterFactory.createFileFilter(FORMAT.TIFF));
        explorateur.addChoosableFileFilter(FileFilterFactory.createFileFilter(FORMAT.ERDAS_IMAGE));
        explorateur.addChoosableFileFilter(FileFilterFactory.createFileFilter(FORMAT.JOINT_PHOTOGRAPHIC_EXPERTS_GROUP));
        explorateur.addChoosableFileFilter(FileFilterFactory.createFileFilter(FORMAT.JPEG_2000));
        explorateur.addChoosableFileFilter(FileFilterFactory.createFileFilter(FORMAT.PORTABLE_NETWORK_GRAPHICS));

        explorateur.setCurrentDirectory(ENV.getPath());

        explorateur.setFileFilter(explorateur.getChoosableFileFilters()[0]);
        int valeur = explorateur.showOpenDialog(this);
        if (valeur == JFileChooser.APPROVE_OPTION) {

            //explorateur.getSelectedFile().getPath();
            Jtf_Fichier_a_convertir.setText(explorateur.getSelectedFile().getPath());
            verification();
            ENV.updatePath(explorateur.getSelectedFile().getAbsoluteFile());

        }
    }//GEN-LAST:event_clic_fichier_source

    private void verification() {

        String nom_sortie = jTF_fichier_en_sortie.getText();
        String nom_entree = Jtf_Fichier_a_convertir.getText();
        String extension_fichier = "";
        String extension_liste = "";
        String nouveaunom = "";
        int index = -1;

        //recuperation de l'extension dans la liste
        int num = jCB_format_voulu.getSelectedIndex();


        switch (num) {
            case 0:
                extension_liste = ".img";
                break;
            case 1:
                extension_liste = ".ecw";
                break;
            case 2:
                extension_liste = ".jpg";
                break;
            case 3:
                extension_liste = ".jp2";
                break;
            case 4:
                extension_liste = ".png";
                break;
            case 5:
                extension_liste = ".tif";
                break;
        }

        //si le texte en sortie est vide on le complete avec celui d'entree
        if (nom_sortie.length() == 0) {
            nom_sortie = nom_entree;
        }
        //recuperation de l'extension du fichier en sortie
        index = nom_sortie.lastIndexOf(".");
        if (index != -1) {
            extension_fichier = nom_sortie.substring(index, nom_sortie.length());
        }

        if (!nom_sortie.equals("")) {
            if (index == -1) {

                nouveaunom = nom_sortie + extension_liste;
            } else {
                nouveaunom = nom_sortie.substring(0, index) + extension_liste;
            }
        } else {
            nouveaunom = nom_sortie;
        }

        jTF_fichier_en_sortie.setText(nouveaunom);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Jtf_Fichier_a_convertir;
    private javax.swing.JButton jBn_fichier_a_conv;
    private javax.swing.JButton jBn_fichier_en_sortie;
    private javax.swing.JComboBox jCB_format_voulu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPl_fichier_RasterConvUnFichier;
    private javax.swing.JTextField jTF_fichier_en_sortie;
    private org.jdesktop.swingx.JXTitledSeparator jXTitledSeparator1;
    // End of variables declaration//GEN-END:variables

    public JComponent getComponent() {
        return this;
    }

    public ProcessObject[] createProcesses() {
        String fichier_sortie = jTF_fichier_en_sortie.getText();
        String fichier_entre = Jtf_Fichier_a_convertir.getText();
        String extension_liste = "";
        String gdal_chemin = ENV.getGDAL_TRANSLATEPath();
        int index = fichier_sortie.lastIndexOf(File.separator);
        int fin = fichier_sortie.length();


        //recuperation de l'extension dans la liste
        int num = jCB_format_voulu.getSelectedIndex();

        switch (num) {
            case 0:
                extension_liste = "HFA";
                break;
            case 1:
                extension_liste = "ECW";
                break;
            case 2:
                extension_liste = "JPEG";
                break;
            case 3:
                extension_liste = "JPEG2000";
                break;
            case 4:
                extension_liste = "PNG";
                break;
            case 5:
                extension_liste = "GTiff";
                break;
        }
        //definition des parametres
        String[] parametres = new String[5];
        parametres[0] = gdal_chemin;
        parametres[1] = "-of";
        parametres[2] = extension_liste;
        parametres[3] = fichier_entre;
        parametres[4] = fichier_sortie;

        repertoire = fichier_sortie.substring(0, index + 1);
        ProcessObject processus = new ProcessObject(parametres, fichier_sortie.substring(index, fin));

        return new ProcessObject[]{processus};
    }
}
