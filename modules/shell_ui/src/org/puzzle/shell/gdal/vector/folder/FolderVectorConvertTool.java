/*
 *  Puzzle-GIS - OpenSource mapping program
 *  http://docs.codehaus.org/display/PUZZLEGIS
 *  Copyright (C) 2007-2008 Puzzle-GIS
 *  
 *  GPLv3 + Classpath exception
 *  
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.puzzle.shell.gdal.vector.folder;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import org.puzzle.shell.gdal.ENV;
import org.puzzle.shell.gdal.GDALTool;
import org.puzzle.shell.misc.runtime.ProcessObject;

/**
 * panneau de convertion de vecteur par dossier
 * @author  johann sorel
 */
public class FolderVectorConvertTool extends JPanel implements GDALTool {

    String repertoire = "";

    /** Creates new form VecteurConvDesFichiers */
    public FolderVectorConvertTool() {
        initComponents();
    }

    private void getFilesRec(List<File> allFiles, String root, boolean sub) {
        File f = new File(root);
        File[] listFiles = f.listFiles();
        for (int i = 0; i < listFiles.length; i++) {
            if (listFiles[i].isDirectory() && sub) {
                getFilesRec(allFiles, listFiles[i].toString(), sub);
            } else if (!listFiles[i].isDirectory()) {
                allFiles.add(listFiles[i]);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtf_entree = new javax.swing.JTextField();
        but_chercher_entree = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        format_sortie = new javax.swing.JComboBox();
        jtf_sortie = new javax.swing.JTextField();
        but_chercher_sortie = new javax.swing.JButton();
        format_entree = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        chk_sub = new javax.swing.JCheckBox();
        jXTitledSeparator1 = new org.jdesktop.swingx.JXTitledSeparator();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "files"))); // NOI18N

        jLabel1.setText(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "input")); // NOI18N

        but_chercher_entree.setText(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "...")); // NOI18N
        but_chercher_entree.setPreferredSize(new java.awt.Dimension(45, 20));
        but_chercher_entree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionChercherEntree(evt);
            }
        });

        jLabel2.setText(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "output")); // NOI18N

        format_sortie.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MicroStation (.dgn)", "Geography Markup Language (.gml)", "Google Earth / Map  (.kml)", "MapInfo Exchange (.mif)", "ESRI Shape (.shp)", "MapInfo (.tab)" }));
        format_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionFormatSortie(evt);
            }
        });

        jtf_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtf_sortiesortieAction(evt);
            }
        });
        jtf_sortie.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtf_sortiesortieLost(evt);
            }
        });

        but_chercher_sortie.setText(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "...")); // NOI18N
        but_chercher_sortie.setPreferredSize(new java.awt.Dimension(45, 20));
        but_chercher_sortie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionChercherSortie(evt);
            }
        });

        format_entree.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "MicroStation (.dgn)", "Geography Markup Language (.gml)", "Google Earth / Map  (.kml)", "MapInfo Exchange(.mif)", "ESRI Shape (.shp)", "MapInfo (.tab)" }));
        format_entree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionFormatEntree(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(format_entree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jtf_entree, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_chercher_entree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(format_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jtf_sortie, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(but_chercher_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(format_entree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_chercher_entree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_entree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(format_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(but_chercher_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtf_sortie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "settings"))); // NOI18N

        chk_sub.setSelected(true);
        chk_sub.setText(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "subfolder")); // NOI18N
        chk_sub.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        chk_sub.setMargin(new java.awt.Insets(0, 0, 0, 0));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chk_sub)
                .addContainerGap(330, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(chk_sub)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jXTitledSeparator1.setTitle(org.openide.util.NbBundle.getMessage(FolderVectorConvertTool.class, "title")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 491, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jXTitledSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void actionFormatEntree(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionFormatEntree
    }//GEN-LAST:event_actionFormatEntree

    private void actionChercherSortie(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionChercherSortie
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        jfc.setCurrentDirectory(ENV.getPath());

        int val = jfc.showOpenDialog(this);

        if (val == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            jtf_sortie.setText(f.getPath());
            ENV.updatePath(f.getAbsoluteFile());

        }
    }//GEN-LAST:event_actionChercherSortie

    private void jtf_sortiesortieLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtf_sortiesortieLost
    }//GEN-LAST:event_jtf_sortiesortieLost

    private void jtf_sortiesortieAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtf_sortiesortieAction
    }//GEN-LAST:event_jtf_sortiesortieAction

    private void actionFormatSortie(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionFormatSortie
    }//GEN-LAST:event_actionFormatSortie

    private void actionChercherEntree(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionChercherEntree
        JFileChooser jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        jfc.setCurrentDirectory(ENV.getPath());

        int val = jfc.showOpenDialog(this);

        if (val == JFileChooser.APPROVE_OPTION) {
            File f = jfc.getSelectedFile();
            jtf_entree.setText(f.getPath());
            ENV.updatePath(f.getAbsoluteFile());
        }
    }//GEN-LAST:event_actionChercherEntree
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton but_chercher_entree;
    private javax.swing.JButton but_chercher_sortie;
    private javax.swing.JCheckBox chk_sub;
    private javax.swing.JComboBox format_entree;
    private javax.swing.JComboBox format_sortie;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private org.jdesktop.swingx.JXTitledSeparator jXTitledSeparator1;
    private javax.swing.JTextField jtf_entree;
    private javax.swing.JTextField jtf_sortie;
    // End of variables declaration//GEN-END:variables

    public JComponent getComponent() {
        return this;
    }

    public ProcessObject[] createProcesses() {
        List<File> allfiles = new ArrayList<File>();
        List<String> okfiles = new ArrayList<String>();
        List<ProcessObject> processes = new ArrayList<ProcessObject>();
        

        String ext_entree = "";

        switch (format_entree.getSelectedIndex()) {
            case 0:
                ext_entree = ".dgn";
                break;
            case 1:
                ext_entree = ".gml";
                break;
            case 2:
                ext_entree = ".kml";
                break;
            case 3:
                ext_entree = ".mif";
                break;
            case 4:
                ext_entree = ".shp";
                break;
            case 5:
                ext_entree = ".tab";
                break;
        }


        String type_sortie = "";
        String ext_sortie = "";
        switch (format_sortie.getSelectedIndex()) {
            case 0:
                type_sortie = "DGN";
                ext_sortie = ".dgn";
                break;
            case 1:
                type_sortie = "GML";
                ext_sortie = ".gml";
                break;
            case 2:
                type_sortie = "KML";
                ext_sortie = ".kml";
                break;
            case 3:
                type_sortie = "MapInfo File";
                ext_sortie = ".mif";
                break;
            case 4:
                type_sortie = "ESRI Shapefile";
                ext_sortie = ".shp";
                break;
            case 5:
                type_sortie = "MapInfo File";
                ext_sortie = ".tab";
                break;
        }


        getFilesRec(allfiles, jtf_entree.getText(), chk_sub.isSelected());

        for (int i = 0; i < allfiles.size(); i++) {
            if (allfiles.get(i).getPath().toLowerCase().endsWith(ext_entree)) {
                okfiles.add(allfiles.get(i).getPath());
            }
        }

        for (int i = 0; i < okfiles.size(); i++) {
            repertoire = okfiles.get(i).substring(0, okfiles.get(i).lastIndexOf(File.separator));
            String shortname = okfiles.get(i).substring(okfiles.get(i).lastIndexOf(File.separator), okfiles.get(i).length());
            shortname = shortname.substring(0, shortname.lastIndexOf(".")) + ext_sortie;


            String[] parametres = new String[5];
            parametres[0] = ENV.getOGR2OGRPath();
            parametres[1] = "-f";
            parametres[2] = type_sortie;
            parametres[3] = jtf_sortie.getText() + shortname;
            parametres[4] = okfiles.get(i);

            ProcessObject po = new ProcessObject(parametres, shortname);

            processes.add(po);
        }

        return processes.toArray(EMPTY_PROCESS_OBJECT_ARRAY);
    }
}
